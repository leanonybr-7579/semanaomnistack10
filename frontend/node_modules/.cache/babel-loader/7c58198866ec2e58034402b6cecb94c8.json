{"ast":null,"code":"import { EventEmitter } from '@unimodules/core';\n\nclass GeocoderError extends Error {\n  constructor() {\n    super('Geocoder service is not available for this device.');\n    this.code = 'E_NO_GEOCODER';\n  }\n\n}\n\nconst emitter = new EventEmitter({});\n\nfunction positionToJSON(position) {\n  if (!position) return null;\n  const {\n    coords = {},\n    timestamp\n  } = position;\n  return {\n    coords: {\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      altitude: coords.altitude,\n      accuracy: coords.accuracy,\n      altitudeAccuracy: coords.altitudeAccuracy,\n      heading: coords.heading,\n      speed: coords.speed\n    },\n    timestamp\n  };\n}\n\nexport default {\n  get name() {\n    return 'ExpoLocation';\n  },\n\n  async getProviderStatusAsync() {\n    return {\n      locationServicesEnabled: 'geolocation' in navigator\n    };\n  },\n\n  async getCurrentPositionAsync(options) {\n    return new Promise((resolve, reject) => navigator.geolocation.getCurrentPosition(position => resolve(positionToJSON(position)), reject, options));\n  },\n\n  async removeWatchAsync(watchId) {\n    navigator.geolocation.clearWatch(watchId);\n  },\n\n  async watchDeviceHeading(headingId) {\n    console.warn('Location.watchDeviceHeading: is not supported on web');\n  },\n\n  async hasServicesEnabledAsync() {\n    return 'geolocation' in navigator;\n  },\n\n  async geocodeAsync() {\n    throw new GeocoderError();\n  },\n\n  async reverseGeocodeAsync() {\n    throw new GeocoderError();\n  },\n\n  async watchPositionImplAsync(watchId, options) {\n    return new Promise(resolve => {\n      // @ts-ignore\n      watchId = global.navigator.geolocation.watchPosition(location => {\n        emitter.emit('Expo.locationChanged', {\n          watchId,\n          location: positionToJSON(location)\n        });\n      }, null, options);\n      resolve(watchId);\n    });\n  },\n\n  async requestPermissionsAsync() {\n    return new Promise(resolve => {\n      navigator.geolocation.getCurrentPosition(() => resolve({\n        status: 'granted'\n      }), ({\n        code\n      }) => {\n        if (code === 1\n        /* PERMISSION_DENIED */\n        ) {\n            resolve({\n              status: 'denied'\n            });\n          } else {\n          resolve({\n            status: 'undetermined'\n          });\n        }\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoLocation.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@unimodules/core';\n\ninterface Coordinates {\n  latitude: number;\n  longitude: number;\n  altitude?: number;\n  accuracy?: number;\n  altitudeAccuracy?: number;\n  heading?: number;\n  speed?: number;\n}\n\ninterface Position {\n  coords: Coordinates;\n  timestamp: number;\n}\n\ninterface PermissionResult {\n  status: string;\n}\n\nclass GeocoderError extends Error {\n  code: string;\n\n  constructor() {\n    super('Geocoder service is not available for this device.');\n    this.code = 'E_NO_GEOCODER';\n  }\n}\n\nconst emitter = new EventEmitter({} as any);\n\nfunction positionToJSON(position: any): Position | null {\n  if (!position) return null;\n\n  const { coords = {}, timestamp } = position;\n  return {\n    coords: {\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      altitude: coords.altitude,\n      accuracy: coords.accuracy,\n      altitudeAccuracy: coords.altitudeAccuracy,\n      heading: coords.heading,\n      speed: coords.speed,\n    },\n    timestamp,\n  };\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoLocation';\n  },\n  async getProviderStatusAsync(): Promise<{ locationServicesEnabled: boolean }> {\n    return {\n      locationServicesEnabled: 'geolocation' in navigator,\n    };\n  },\n  async getCurrentPositionAsync(options: object): Promise<Position | null> {\n    return new Promise<Position | null>((resolve, reject) =>\n      navigator.geolocation.getCurrentPosition(\n        position => resolve(positionToJSON(position)),\n        reject,\n        options\n      )\n    );\n  },\n  async removeWatchAsync(watchId): Promise<void> {\n    navigator.geolocation.clearWatch(watchId);\n  },\n  async watchDeviceHeading(headingId): Promise<void> {\n    console.warn('Location.watchDeviceHeading: is not supported on web');\n  },\n  async hasServicesEnabledAsync(): Promise<boolean> {\n    return 'geolocation' in navigator;\n  },\n  async geocodeAsync(): Promise<any[]> {\n    throw new GeocoderError();\n  },\n  async reverseGeocodeAsync(): Promise<any[]> {\n    throw new GeocoderError();\n  },\n  async watchPositionImplAsync(watchId: string, options: object): Promise<string> {\n    return new Promise<string>(resolve => {\n      // @ts-ignore\n      watchId = global.navigator.geolocation.watchPosition(\n        location => {\n          emitter.emit('Expo.locationChanged', { watchId, location: positionToJSON(location) });\n        },\n        null,\n        options\n      );\n      resolve(watchId);\n    });\n  },\n  async requestPermissionsAsync(): Promise<PermissionResult> {\n    return new Promise<PermissionResult>(resolve => {\n      navigator.geolocation.getCurrentPosition(\n        () => resolve({ status: 'granted' }),\n        ({ code }) => {\n          if (code === 1 /* PERMISSION_DENIED */) {\n            resolve({ status: 'denied' });\n          } else {\n            resolve({ status: 'undetermined' });\n          }\n        }\n      );\n    });\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}