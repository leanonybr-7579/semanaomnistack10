{"ast":null,"code":"import { EventEmitter, Platform, CodedError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport { PermissionStatus } from 'unimodules-permissions-interface';\nimport ExpoLocation from './ExpoLocation';\nconst LocationEventEmitter = new EventEmitter(ExpoLocation);\nexport { PermissionStatus };\nvar LocationAccuracy;\n\n(function (LocationAccuracy) {\n  LocationAccuracy[LocationAccuracy[\"Lowest\"] = 1] = \"Lowest\";\n  LocationAccuracy[LocationAccuracy[\"Low\"] = 2] = \"Low\";\n  LocationAccuracy[LocationAccuracy[\"Balanced\"] = 3] = \"Balanced\";\n  LocationAccuracy[LocationAccuracy[\"High\"] = 4] = \"High\";\n  LocationAccuracy[LocationAccuracy[\"Highest\"] = 5] = \"Highest\";\n  LocationAccuracy[LocationAccuracy[\"BestForNavigation\"] = 6] = \"BestForNavigation\";\n})(LocationAccuracy || (LocationAccuracy = {}));\n\nvar LocationActivityType;\n\n(function (LocationActivityType) {\n  LocationActivityType[LocationActivityType[\"Other\"] = 1] = \"Other\";\n  LocationActivityType[LocationActivityType[\"AutomotiveNavigation\"] = 2] = \"AutomotiveNavigation\";\n  LocationActivityType[LocationActivityType[\"Fitness\"] = 3] = \"Fitness\";\n  LocationActivityType[LocationActivityType[\"OtherNavigation\"] = 4] = \"OtherNavigation\";\n  LocationActivityType[LocationActivityType[\"Airborne\"] = 5] = \"Airborne\";\n})(LocationActivityType || (LocationActivityType = {}));\n\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType };\nexport var GeofencingEventType;\n\n(function (GeofencingEventType) {\n  GeofencingEventType[GeofencingEventType[\"Enter\"] = 1] = \"Enter\";\n  GeofencingEventType[GeofencingEventType[\"Exit\"] = 2] = \"Exit\";\n})(GeofencingEventType || (GeofencingEventType = {}));\n\nexport var GeofencingRegionState;\n\n(function (GeofencingRegionState) {\n  GeofencingRegionState[GeofencingRegionState[\"Unknown\"] = 0] = \"Unknown\";\n  GeofencingRegionState[GeofencingRegionState[\"Inside\"] = 1] = \"Inside\";\n  GeofencingRegionState[GeofencingRegionState[\"Outside\"] = 2] = \"Outside\";\n})(GeofencingRegionState || (GeofencingRegionState = {}));\n\nlet nextWatchId = 0;\nlet headingId;\n\nfunction _getNextWatchId() {\n  nextWatchId++;\n  return nextWatchId;\n}\n\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}\n\nlet watchCallbacks = {};\nlet deviceEventSubscription;\nlet headingEventSub;\nlet googleApiKey;\nconst googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\nexport async function getProviderStatusAsync() {\n  return ExpoLocation.getProviderStatusAsync();\n}\nexport async function enableNetworkProviderAsync() {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\nexport async function getCurrentPositionAsync(options = {}) {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\nexport async function getLastKnownPositionAsync() {\n  return ExpoLocation.getLastKnownPositionAsync();\n} // Start Compass Module\n// To simplify, we will call watchHeadingAsync and wait for one update To ensure accuracy, we wait\n// for a couple of watch updates if the data has low accuracy\n\nexport async function getHeadingAsync() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // If there is already a compass active (would be a watch)\n      if (headingEventSub) {\n        let tries = 0;\n        const headingSub = LocationEventEmitter.addListener('Expo.headingChanged', ({\n          heading\n        }) => {\n          if (heading.accuracy > 1 || tries > 5) {\n            resolve(heading);\n            LocationEventEmitter.removeSubscription(headingSub);\n          } else {\n            tries += 1;\n          }\n        });\n      } else {\n        let done = false;\n        let subscription;\n        let tries = 0;\n        subscription = await watchHeadingAsync(heading => {\n          if (!done) {\n            if (heading.accuracy > 1 || tries > 5) {\n              subscription.remove();\n              resolve(heading);\n              done = true;\n            } else {\n              tries += 1;\n            }\n          } else {\n            subscription.remove();\n          }\n        });\n\n        if (done) {\n          subscription.remove();\n        }\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport async function watchHeadingAsync(callback) {\n  // Check if there is already a compass event watch.\n  if (headingEventSub) {\n    _removeHeadingWatcher(headingId);\n  }\n\n  headingEventSub = LocationEventEmitter.addListener('Expo.headingChanged', ({\n    watchId,\n    heading\n  }) => {\n    const callback = watchCallbacks[watchId];\n\n    if (callback) {\n      callback(heading);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  });\n  headingId = _getNextWatchId();\n  watchCallbacks[headingId] = callback;\n  await ExpoLocation.watchDeviceHeading(headingId);\n  return {\n    remove() {\n      _removeHeadingWatcher(headingId);\n    }\n\n  };\n} // Removes the compass listener and sub from JS and Native\n\nfunction _removeHeadingWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  delete watchCallbacks[watchId];\n  ExpoLocation.removeWatchAsync(watchId);\n\n  if (headingEventSub) {\n    LocationEventEmitter.removeSubscription(headingEventSub);\n    headingEventSub = null;\n  }\n} // End Compass Module\n\n\nfunction _maybeInitializeEmitterSubscription() {\n  if (!deviceEventSubscription) {\n    deviceEventSubscription = LocationEventEmitter.addListener('Expo.locationChanged', ({\n      watchId,\n      location\n    }) => {\n      const callback = watchCallbacks[watchId];\n\n      if (callback) {\n        callback(location);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    });\n  }\n}\n\nexport async function geocodeAsync(address) {\n  return ExpoLocation.geocodeAsync(address).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new CodedError(error.code, `${error.message} Please set a Google API Key to use geocoding.`);\n      }\n\n      return _googleGeocodeAsync(address);\n    }\n\n    throw error;\n  });\n}\nexport async function reverseGeocodeAsync(location) {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');\n  }\n\n  return ExpoLocation.reverseGeocodeAsync(location).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new CodedError(error.code, `${error.message} Please set a Google API Key to use geocoding.`);\n      }\n\n      return _googleReverseGeocodeAsync(location);\n    }\n\n    throw error;\n  });\n}\nexport function setApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\n\nasync function _googleGeocodeAsync(address) {\n  const result = await fetch(`${googleApiUrl}?key=${googleApiKey}&address=${encodeURI(address)}`);\n  const resultObject = await result.json();\n\n  if (resultObject.status === 'ZERO_RESULTS') {\n    return [];\n  }\n\n  assertGeocodeResults(resultObject);\n  return resultObject.results.map(result => {\n    let location = result.geometry.location; // TODO: This is missing a lot of props\n\n    return {\n      latitude: location.lat,\n      longitude: location.lng\n    };\n  });\n}\n\nasync function _googleReverseGeocodeAsync(options) {\n  const result = await fetch(`${googleApiUrl}?key=${googleApiKey}&latlng=${options.latitude},${options.longitude}`);\n  const resultObject = await result.json();\n\n  if (resultObject.status === 'ZERO_RESULTS') {\n    return [];\n  }\n\n  assertGeocodeResults(resultObject);\n  return resultObject.results.map(result => {\n    const address = {};\n    result.address_components.forEach(component => {\n      if (component.types.includes('locality')) {\n        address.city = component.long_name;\n      } else if (component.types.includes('street_address')) {\n        address.street = component.long_name;\n      } else if (component.types.includes('administrative_area_level_1')) {\n        address.region = component.long_name;\n      } else if (component.types.includes('country')) {\n        address.country = component.long_name;\n      } else if (component.types.includes('postal_code')) {\n        address.postalCode = component.long_name;\n      } else if (component.types.includes('point_of_interest')) {\n        address.name = component.long_name;\n      }\n    });\n    return address;\n  });\n} // https://developers.google.com/maps/documentation/geocoding/intro\n\n\nfunction assertGeocodeResults(resultObject) {\n  const {\n    status,\n    error_message\n  } = resultObject;\n\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n    }\n\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n} // Polyfill: navigator.geolocation.watchPosition\n\n\nfunction watchPosition(success, error, options) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n\n  watchCallbacks[watchId] = success;\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    _removeWatcher(watchId);\n\n    error({\n      watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\n\nexport async function watchPositionAsync(options, callback) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n\n  watchCallbacks[watchId] = callback;\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n  return {\n    remove() {\n      _removeWatcher(watchId);\n    }\n\n  };\n} // Polyfill: navigator.geolocation.clearWatch\n\nfunction clearWatch(watchId) {\n  _removeWatcher(watchId);\n}\n\nfunction _removeWatcher(watchId) {\n  // Do nothing if we have already removed the subscription\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  ExpoLocation.removeWatchAsync(watchId);\n  delete watchCallbacks[watchId];\n\n  if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n    LocationEventEmitter.removeSubscription(deviceEventSubscription);\n    deviceEventSubscription = null;\n  }\n}\n\nfunction getCurrentPosition(success, error = () => {}, options = {}) {\n  invariant(typeof success === 'function', 'Must provide a valid success callback.');\n  invariant(typeof options === 'object', 'options must be an object.');\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n} // This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\n\n\nasync function _getCurrentPositionAsyncWrapper(success, error, options) {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await getCurrentPositionAsync(options);\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\nexport async function getPermissionsAsync() {\n  return await ExpoLocation.getPermissionsAsync();\n}\nexport async function requestPermissionsAsync() {\n  return await ExpoLocation.requestPermissionsAsync();\n} // --- Location service\n\nexport async function hasServicesEnabledAsync() {\n  return await ExpoLocation.hasServicesEnabledAsync();\n} // --- Background location updates\n\nfunction _validateTaskName(taskName) {\n  invariant(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n}\n\nexport async function isBackgroundLocationAvailableAsync() {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\nexport async function startLocationUpdatesAsync(taskName, options = {\n  accuracy: LocationAccuracy.Balanced\n}) {\n  _validateTaskName(taskName);\n\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\nexport async function stopLocationUpdatesAsync(taskName) {\n  _validateTaskName(taskName);\n\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\nexport async function hasStartedLocationUpdatesAsync(taskName) {\n  _validateTaskName(taskName);\n\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n} // --- Geofencing\n\nfunction _validateRegions(regions) {\n  if (!regions || regions.length === 0) {\n    throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n  }\n\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(`Region's longitude must be a number. Got '${region.longitude}' instead.`);\n    }\n\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\nexport async function startGeofencingAsync(taskName, regions = []) {\n  _validateTaskName(taskName);\n\n  _validateRegions(regions);\n\n  await ExpoLocation.startGeofencingAsync(taskName, {\n    regions\n  });\n}\nexport async function stopGeofencingAsync(taskName) {\n  _validateTaskName(taskName);\n\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\nexport async function hasStartedGeofencingAsync(taskName) {\n  _validateTaskName(taskName);\n\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    // Polyfill navigator.geolocation for interop with the core react-native and web API approach to\n    // geolocation\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {}\n    };\n  }\n}\nexport { // For internal purposes\nLocationEventEmitter as EventEmitter, _getCurrentWatchId };","map":{"version":3,"sources":["../src/Location.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, CodedError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport {\n  PermissionResponse as UMPermissionResponse,\n  PermissionStatus,\n} from 'unimodules-permissions-interface';\n\nimport ExpoLocation from './ExpoLocation';\n\nconst LocationEventEmitter = new EventEmitter(ExpoLocation);\n\nexport interface ProviderStatus {\n  locationServicesEnabled: boolean;\n  backgroundModeEnabled: boolean;\n  gpsAvailable?: boolean;\n  networkAvailable?: boolean;\n  passiveAvailable?: boolean;\n}\n\nexport interface LocationOptions {\n  accuracy?: LocationAccuracy;\n  maximumAge?: number;\n  enableHighAccuracy?: boolean;\n  timeInterval?: number;\n  distanceInterval?: number;\n  timeout?: number;\n  mayShowUserSettingsDialog?: boolean;\n}\n\nexport interface LocationData {\n  coords: {\n    latitude: number;\n    longitude: number;\n    altitude: number;\n    accuracy: number;\n    heading: number;\n    speed: number;\n  };\n  timestamp: number;\n}\n\nexport interface HeadingData {\n  trueHeading: number;\n  magHeading: number;\n  accuracy: number;\n}\n\nexport interface GeocodedLocation {\n  latitude: number;\n  longitude: number;\n  altitude?: number;\n  accuracy?: number;\n}\n\nexport interface Address {\n  city: string;\n  street: string;\n  region: string;\n  country: string;\n  postalCode: string;\n  name: string;\n}\n\nexport { PermissionStatus };\n\nexport type PermissionDetailsLocationIOS = {\n  scope: 'whenInUse' | 'always';\n};\n\nexport type PermissionDetailsLocationAndroid = {\n  scope: 'fine' | 'coarse' | 'none';\n};\n\nexport interface PermissionResponse extends UMPermissionResponse {\n  ios?: PermissionDetailsLocationIOS;\n  android?: PermissionDetailsLocationAndroid;\n}\n\nexport interface LocationTaskOptions {\n  accuracy?: LocationAccuracy;\n  timeInterval?: number; // Android only\n  distanceInterval?: number;\n  showsBackgroundLocationIndicator?: boolean; // iOS only\n  deferredUpdatesDistance?: number;\n  deferredUpdatesTimeout?: number;\n  deferredUpdatesInterval?: number;\n\n  // iOS only\n  activityType?: LocationActivityType;\n  pausesUpdatesAutomatically?: boolean;\n\n  foregroundService?: {\n    notificationTitle: string;\n    notificationBody: string;\n    notificationColor?: string;\n  };\n}\n\nexport interface LocationRegion {\n  identifier?: string;\n  latitude: number;\n  longitude: number;\n  radius: number;\n  notifyOnEnter?: boolean;\n  notifyOnExit?: boolean;\n}\n\ntype Subscription = {\n  remove: () => void;\n};\nexport type LocationCallback = (data: LocationData) => any;\nexport type LocationHeadingCallback = (data: HeadingData) => any;\n\nenum LocationAccuracy {\n  Lowest = 1,\n  Low = 2,\n  Balanced = 3,\n  High = 4,\n  Highest = 5,\n  BestForNavigation = 6,\n}\n\nenum LocationActivityType {\n  Other = 1,\n  AutomotiveNavigation = 2,\n  Fitness = 3,\n  OtherNavigation = 4,\n  Airborne = 5,\n}\n\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType };\n\nexport enum GeofencingEventType {\n  Enter = 1,\n  Exit = 2,\n}\n\nexport enum GeofencingRegionState {\n  Unknown = 0,\n  Inside = 1,\n  Outside = 2,\n}\n\nlet nextWatchId = 0;\nlet headingId;\nfunction _getNextWatchId() {\n  nextWatchId++;\n  return nextWatchId;\n}\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}\n\nlet watchCallbacks: {\n  [watchId: number]: LocationCallback | LocationHeadingCallback;\n} = {};\n\nlet deviceEventSubscription: Subscription | null;\nlet headingEventSub: Subscription | null;\nlet googleApiKey;\nconst googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\nexport async function getProviderStatusAsync(): Promise<ProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationData> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\nexport async function getLastKnownPositionAsync(): Promise<LocationData> {\n  return ExpoLocation.getLastKnownPositionAsync();\n}\n\n// Start Compass Module\n\n// To simplify, we will call watchHeadingAsync and wait for one update To ensure accuracy, we wait\n// for a couple of watch updates if the data has low accuracy\nexport async function getHeadingAsync(): Promise<HeadingData> {\n  return new Promise<HeadingData>(async (resolve, reject) => {\n    try {\n      // If there is already a compass active (would be a watch)\n      if (headingEventSub) {\n        let tries = 0;\n        const headingSub = LocationEventEmitter.addListener(\n          'Expo.headingChanged',\n          ({ heading }: { heading: HeadingData }) => {\n            if (heading.accuracy > 1 || tries > 5) {\n              resolve(heading);\n              LocationEventEmitter.removeSubscription(headingSub);\n            } else {\n              tries += 1;\n            }\n          }\n        );\n      } else {\n        let done = false;\n        let subscription;\n        let tries = 0;\n        subscription = await watchHeadingAsync((heading: HeadingData) => {\n          if (!done) {\n            if (heading.accuracy > 1 || tries > 5) {\n              subscription.remove();\n              resolve(heading);\n              done = true;\n            } else {\n              tries += 1;\n            }\n          } else {\n            subscription.remove();\n          }\n        });\n\n        if (done) {\n          subscription.remove();\n        }\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport async function watchHeadingAsync(\n  callback: LocationHeadingCallback\n): Promise<{ remove: () => void }> {\n  // Check if there is already a compass event watch.\n  if (headingEventSub) {\n    _removeHeadingWatcher(headingId);\n  }\n\n  headingEventSub = LocationEventEmitter.addListener(\n    'Expo.headingChanged',\n    ({ watchId, heading }: { watchId: string; heading: HeadingData }) => {\n      const callback = watchCallbacks[watchId];\n      if (callback) {\n        callback(heading);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    }\n  );\n\n  headingId = _getNextWatchId();\n  watchCallbacks[headingId] = callback;\n  await ExpoLocation.watchDeviceHeading(headingId);\n  return {\n    remove() {\n      _removeHeadingWatcher(headingId);\n    },\n  };\n}\n\n// Removes the compass listener and sub from JS and Native\nfunction _removeHeadingWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n  delete watchCallbacks[watchId];\n  ExpoLocation.removeWatchAsync(watchId);\n  if (headingEventSub) {\n    LocationEventEmitter.removeSubscription(headingEventSub);\n    headingEventSub = null;\n  }\n}\n// End Compass Module\n\nfunction _maybeInitializeEmitterSubscription() {\n  if (!deviceEventSubscription) {\n    deviceEventSubscription = LocationEventEmitter.addListener(\n      'Expo.locationChanged',\n      ({ watchId, location }: { watchId: string; location: LocationData }) => {\n        const callback = watchCallbacks[watchId];\n        if (callback) {\n          callback(location);\n        } else {\n          ExpoLocation.removeWatchAsync(watchId);\n        }\n      }\n    );\n  }\n}\n\nexport async function geocodeAsync(address: string): Promise<GeocodedLocation[]> {\n  return ExpoLocation.geocodeAsync(address).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new CodedError(\n          error.code,\n          `${error.message} Please set a Google API Key to use geocoding.`\n        );\n      }\n      return _googleGeocodeAsync(address);\n    }\n    throw error;\n  });\n}\n\nexport async function reverseGeocodeAsync(location: {\n  latitude: number;\n  longitude: number;\n}): Promise<Address[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location should be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  return ExpoLocation.reverseGeocodeAsync(location).catch(error => {\n    const platformUsesGoogleMaps = Platform.OS === 'android' || Platform.OS === 'web';\n\n    if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new CodedError(\n          error.code,\n          `${error.message} Please set a Google API Key to use geocoding.`\n        );\n      }\n      return _googleReverseGeocodeAsync(location);\n    }\n    throw error;\n  });\n}\n\nexport function setApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nasync function _googleGeocodeAsync(address: string): Promise<GeocodedLocation[]> {\n  const result = await fetch(`${googleApiUrl}?key=${googleApiKey}&address=${encodeURI(address)}`);\n  const resultObject = await result.json();\n\n  if (resultObject.status === 'ZERO_RESULTS') {\n    return [];\n  }\n\n  assertGeocodeResults(resultObject);\n\n  return resultObject.results.map(result => {\n    let location = result.geometry.location;\n    // TODO: This is missing a lot of props\n    return {\n      latitude: location.lat,\n      longitude: location.lng,\n    };\n  });\n}\n\nasync function _googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<Address[]> {\n  const result = await fetch(\n    `${googleApiUrl}?key=${googleApiKey}&latlng=${options.latitude},${options.longitude}`\n  );\n  const resultObject = await result.json();\n\n  if (resultObject.status === 'ZERO_RESULTS') {\n    return [];\n  }\n\n  assertGeocodeResults(resultObject);\n\n  return resultObject.results.map(result => {\n    const address: any = {};\n\n    result.address_components.forEach(component => {\n      if (component.types.includes('locality')) {\n        address.city = component.long_name;\n      } else if (component.types.includes('street_address')) {\n        address.street = component.long_name;\n      } else if (component.types.includes('administrative_area_level_1')) {\n        address.region = component.long_name;\n      } else if (component.types.includes('country')) {\n        address.country = component.long_name;\n      } else if (component.types.includes('postal_code')) {\n        address.postalCode = component.long_name;\n      } else if (component.types.includes('point_of_interest')) {\n        address.name = component.long_name;\n      }\n    });\n    return address as Address;\n  });\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = success;\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(err => {\n    _removeWatcher(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\nexport async function watchPositionAsync(options: LocationOptions, callback: LocationCallback) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = callback;\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      _removeWatcher(watchId);\n    },\n  };\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  _removeWatcher(watchId);\n}\n\nfunction _removeWatcher(watchId) {\n  // Do nothing if we have already removed the subscription\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  ExpoLocation.removeWatchAsync(watchId);\n  delete watchCallbacks[watchId];\n  if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n    LocationEventEmitter.removeSubscription(deviceEventSubscription);\n    deviceEventSubscription = null;\n  }\n}\n\ntype GeoSuccessCallback = (data: LocationData) => void;\ntype GeoErrorCallback = (error: any) => void;\n\nfunction getCurrentPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback = () => {},\n  options: LocationOptions = {}\n): void {\n  invariant(typeof success === 'function', 'Must provide a valid success callback.');\n\n  invariant(typeof options === 'object', 'options must be an object.');\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await getCurrentPositionAsync(options);\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.requestPermissionsAsync();\n}\n\n// --- Location service\n\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  invariant(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n}\n\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: LocationRegion[]) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: LocationRegion[] = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Polyfill navigator.geolocation for interop with the core react-native and web API approach to\n    // geolocation\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nexport {\n  // For internal purposes\n  LocationEventEmitter as EventEmitter,\n  _getCurrentWatchId,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}